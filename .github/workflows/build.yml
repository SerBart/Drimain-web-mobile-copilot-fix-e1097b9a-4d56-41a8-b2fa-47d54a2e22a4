name: Build and Test DriMain

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  JAVA_VERSION: '17'
  FLUTTER_VERSION: '3.22.0'
  API_BASE: 'http://localhost:8080'

jobs:
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run backend tests
      run: ./mvnw clean test
      
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Backend Test Results
        path: target/surefire-reports/*.xml
        reporter: java-junit

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        
    - name: Cache Flutter dependencies
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.FLUTTER_ROOT }}/.pub-cache
          ${{ github.workspace }}/frontend/.dart_tool
        key: ${{ runner.os }}-flutter-${{ hashFiles('frontend/pubspec.lock') }}
        restore-keys: ${{ runner.os }}-flutter-
        
    - name: Get Flutter dependencies
      working-directory: frontend
      run: flutter pub get
      
    - name: Analyze Flutter code
      working-directory: frontend
      run: flutter analyze
      
    - name: Run Flutter tests
      working-directory: frontend
      run: flutter test

  integration-build:
    name: Integration Build
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Cache Flutter dependencies
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.FLUTTER_ROOT }}/.pub-cache
          ${{ github.workspace }}/frontend/.dart_tool
        key: ${{ runner.os }}-flutter-${{ hashFiles('frontend/pubspec.lock') }}
        restore-keys: ${{ runner.os }}-flutter-
        
    - name: Make build script executable
      run: chmod +x build-frontend.sh
      
    - name: Build integrated application
      run: ./build-frontend.sh
      env:
        API_BASE: ${{ env.API_BASE }}
        BUILD_MODE: production
        
    - name: Verify JAR file
      run: |
        if [ -f "target/driMain-1.0.0.jar" ]; then
          echo "‚úÖ JAR file created successfully"
          echo "üì¶ JAR size: $(du -h target/driMain-1.0.0.jar | cut -f1)"
          ls -la target/driMain-1.0.0.jar
        else
          echo "‚ùå JAR file not found"
          exit 1
        fi
        
    - name: Verify static resources
      run: |
        if [ -f "src/main/resources/static/index.html" ]; then
          echo "‚úÖ Flutter web assets embedded successfully"
          echo "üìÅ Static resources:"
          ls -la src/main/resources/static/ | head -10
        else
          echo "‚ùå Flutter web assets not found"
          exit 1
        fi
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: drimain-build-${{ github.sha }}
        path: |
          target/driMain-1.0.0.jar
          src/main/resources/static/
        retention-days: 7

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [integration-build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}/drimain
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          API_BASE=${{ env.API_BASE }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deployment-ready:
    name: Deployment Ready
    runs-on: ubuntu-latest
    needs: [integration-build]
    if: success()
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: drimain-build-${{ github.sha }}
        
    - name: Deployment summary
      run: |
        echo "üéâ DriMain build completed successfully!"
        echo ""
        echo "üì¶ Artifacts ready for deployment:"
        echo "   - driMain-1.0.0.jar (Spring Boot with embedded Flutter web)"
        echo "   - Docker image: ghcr.io/${{ github.repository }}/drimain:latest"
        echo ""
        echo "üöÄ To deploy:"
        echo "   java -jar driMain-1.0.0.jar"
        echo "   or"
        echo "   docker run -p 8080:8080 ghcr.io/${{ github.repository }}/drimain:latest"
        echo ""
        echo "üåê Application will be available at:"
        echo "   - Web UI: http://localhost:8080"
        echo "   - API docs: http://localhost:8080/swagger-ui/index.html"